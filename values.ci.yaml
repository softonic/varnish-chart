# Default values for varnish.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  tag: "7.2.1"
  repository: softonic/varnish

maxUnavailable: 1

varnishListeningPort: 8080

imagePullSecrets: []
nameOverride: "tesme"
fullnameOverride: "testmemore"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podLabels:
  label1: value1
podAnnotations:
  annotation1: value1

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 3000
  fsGroupChangePolicy: "OnRootMismatch"

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 101 # This is the varnish user id in the varnish image
  seccompProfile:
    type: RuntimeDefault

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  metrics: []
  targetCPUUtilizationPercentage: null
  targetMemoryUtilizationPercentage: null
  behavior: {}

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

extraVolumes:
  - name: disk-cache
    emptyDir: {}

extraVolumeMounts:
  - name: disk-cache
    mountPath: /mnt/disk-cache

service:
  type: ClusterIP
  port: 80
  annotations: {}
  nodePort: null

ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/tls-acme: "true"
  hosts:
  - host: chart-example.local
    paths: ["/"]
  tls:
  - secretName: chart-example-tls
    hosts:
      - chart-example.local

# memory used to share varnish process' info for exporter and logger
vsmMemorySizeLimit: 2M

arguments:
  - -s
  - diskcache=file,/mnt/disk-cache,10g
  - -p
  - http_resp_hdr_len=20480

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  httpGet:
    path: /healthcheck
    port: http
  failureThreshold: 3
  initialDelaySeconds: 45
  timeoutSeconds: 1
  periodSeconds: 20
readinessProbe:
  httpGet:
    path: /healthcheck
    port: http
  initialDelaySeconds: 10
  timeoutSeconds: 1
  periodSeconds: 5

lifecycle: {}

varnishSize: 100M

nodeSelector: {}

tolerations: []

affinity: {}

vcl:
  default.vcl: |-
    if (this) {
      that
    }

vclFiles:
  default.vcl: "vcl/default.vcl"

# set this to a configmap name if we want to provide our own instead of declaring text
# it should have filenames as keys (as default.vcl)

# example: vclConfigmap: my-vcl-configmap
vclConfigmap: testmemore

# rollout deployment with each upgrade
rolloutDeployment: false

initContainers: []

logging:
  enabled: true
  customOutput: null
  resources: {}
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 101

prometheus:
  enabled: true
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
  path: "/metrics"
  port: "9131"
  scrape: false
  resources: {}
  serviceMonitor:
    enabled: true
    additionalLabels: {}
    honorLabels: true
    interval: null
    namespace: null
    path: null
    timeout: null
